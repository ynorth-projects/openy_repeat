<?php

/**
 * @file
 * Open Y Repeat Nodes module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\openy_repeat\Batch\RepeatActualizeBatch;

/**
 * Implements hook_entity_insert().
 */
function openy_repeat_nodes_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'session') {
    Drupal::service('session_instance.manager')
      ->recreateSessionInstances($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function openy_repeat_nodes_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node') {
    $bundle = $entity->bundle();
    switch ($bundle) {
      case 'session':
        Drupal::service('session_instance.manager')
          ->recreateSessionInstances($entity);
        break;

      case 'class':
      case 'activity':
      case 'program_subcategory':
      case 'program':
        openy_repeat_nodes_actualize_sessions($entity);
        break;
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function openy_repeat_nodes_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'session') {
    Drupal::service('session_instance.manager')
      ->deleteSessionInstancesBySession($entity);
  }
  // TODO: delete sessions instances in case other nodes deleted.
}

/**
 * Actualize session instances.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 */
function openy_repeat_nodes_actualize_sessions(EntityInterface $entity) {
  // A Draft has been created â€“ ignore.
  if (!$entity->isDefaultRevision()) {
    return;
  }
  $bundle = $entity->bundle();

  $session_ids = [];
  $moderation_wrapper = Drupal::service('openy_moderation_wrapper.entity_moderation_status');
  $state_changed = $moderation_wrapper->entity_moderation_state_change($entity);
  $session_instance_manager = Drupal::service('session_instance.manager');
  if ($state_changed) {
    // Get all related sessions.
    $session_ids = $session_instance_manager
      ->getSessionsByParams([$entity->bundle() => [$entity->id()]]);
  }
  elseif ($bundle != 'program') {
    if (!$session_instance_manager->isSignificantChange($entity)) {
      return;
    }

    $entity_ids = [$entity->id()];
    if ($bundle == 'program_subcategory') {
      $entity_ids = \Drupal::entityQuery('node')
        ->condition('type', 'activity')
        ->condition('field_activity_category', $entity_ids, 'IN')
        ->execute();
      $bundle = 'activity';
    }

    if ($bundle == 'activity') {
      $entity_ids = \Drupal::entityQuery('node')
        ->condition('type', 'class')
        ->condition('field_class_activity', $entity_ids, 'IN')
        ->execute();
      $bundle = 'class';
    }

    if ($bundle == 'class') {
      $entity_ids = \Drupal::entityQuery('node')
        ->condition('type', 'session')
        ->condition('field_session_class', $entity_ids, 'IN')
        ->execute();
      $session_ids = $entity_ids;
    }
  }

  if (!$session_ids) {
    return;
  }
  batch_set([
    'operations' => [
      [
        [RepeatActualizeBatch::class, 'run'],
        [$session_ids],
      ],
    ],
    'title' => t('Actualizing schedule'),
    'finished' => [
      RepeatActualizeBatch::class,
      'finished',
    ],
  ]);
}
